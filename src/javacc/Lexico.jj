/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Lexico.jj */
/*@egen*/options{  JDK_VERSION = "1.5";  STATIC = true;  //DEBUG_LOOKAHEAD = true;
  //FORCE_LA_CHECK = true;}PARSER_BEGIN(EG1)package javacc;public class EG1/*@bgen(jjtree)*/implements EG1TreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTEG1State jjtree = new JJTEG1State();

/*@egen*/  public static java.io.InputStream nome;  public static java.io.FileReader arquivo;  public static void main(String args []) throws ParseException  {    try    {      java.io.File file = new java.io.File("c:/compilador/test.txt");      arquivo = new java.io.FileReader(file);      nome = new java.io.FileInputStream(file);    }    catch (Exception e)    {      System.out.println("Arquivo Nao Encontrado");    }    EG1 parser = new EG1(nome);    while (true)    {      switch (parser.programa())      {        case 0 : System.out.println("OK.");        break;        case 1 : System.out.println("Analise Lexia e Sintatica concluida sem erros");     			return;       // break;        default : break;      }    }  }}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"| "\f"}TOKEN : /*PALAVRAS RESERVADASS*/{  < INT : "INT" >| < REAL : "REAL" >| < BOOL : "BOOL" >| < LIST : "LIST" >| < STR : "STR" >| < CARACT : "CARACT" >| < SE : "SE" >| < SENAO : "SENAO" >| < SENAOSE : "SENAOSE" >| < ENQUANTO : "ENQUANTO" >| < PARA : "PARA" >| < VERDADEIRO : "VERDADEIRO" >| < FALSO : "FALSO" >| < IMPRIMIR : "IMPRIMIR" >}TOKEN : /* OPERADORES */{  < MAIS : "+" >| < MENOS : "-" >| < MULTIPLICAR : "*" >| < DIVIDIR : "/" >| < ATRIBUICAO : "=" >| < MAIOR : ">" >| < MENOR : "<" >| < MAIOR_IGUAL : " >=" >| < MENOR_IGUAL : "<=" >| < IGUAL : "==" >| < DIFERENTE : "!=" >}TOKEN : /* SIMBOLOS ESPECIAIS*/{  < ABRE_PARENTESES : "(" >| < FECHA_PARENTESES : ")" >| < ABRE_CHAVES : "{" >| < FECHA_CHAVES : "}" >| < ABRE_COLCHETE : "[" >| < FECHA_COLCHETE : "]" >| < PONTO_VIRGULA : ";" >| < VIRGULA : "," >| < PONTO : "." >}TOKEN : /* CONSTANTES */{  < CONSTANTE_INT : (< DIGITO >)+ >| < CONSTANTE_REAL : (< DIGITO >)+ "," (< DIGITO >)* >| < DIGITO : [ "0"-"9" ] >| <VARIAVEL: <CARACTERE> (<CARACTERE>)*>| < #CARACTERE : [ "a"-"z" ] >}int programa() :{/*@bgen(jjtree) programa */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) programa */
  try {
/*@egen*/  conteudoBloco()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return 0;  }| fimDoArquivo()/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/{  return 1;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}int fimDoArquivo():{/*@bgen(jjtree) fimDoArquivo */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMDOARQUIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) fimDoArquivo */
  try {
/*@egen*/  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {return 1;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void op_rel() :{/*@bgen(jjtree) op_rel */
  SimpleNode jjtn000 = new SimpleNode(JJTOP_REL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) op_rel */
  try {
/*@egen*/  < MAIOR >| < MENOR >| < MAIOR_IGUAL >| < MENOR_IGUAL >| < IGUAL >| < DIFERENTE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void const_tipo() :{/*@bgen(jjtree) const_tipo */
  SimpleNode jjtn000 = new SimpleNode(JJTCONST_TIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) const_tipo */
  try {
/*@egen*/  < INT >| < REAL >| < BOOL >| < LIST >| < STR >| < CARACT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void op_arit() :{/*@bgen(jjtree) op_arit */
  SimpleNode jjtn000 = new SimpleNode(JJTOP_ARIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) op_arit */
  try {
/*@egen*/  < MAIS >| < MENOS >| < MULTIPLICAR >| < DIVIDIR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void variavel() :{/*@bgen(jjtree) variavel */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIAVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) variavel */
  try {
/*@egen*/  < VARIAVEL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void numero() :{/*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) numero */
  try {
/*@egen*/  < CONSTANTE_INT >| < CONSTANTE_REAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void numVar() :{/*@bgen(jjtree) numVar */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) numVar */
  try {
/*@egen*/  numero()| variavel()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void operacao() :{/*@bgen(jjtree) operacao */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) operacao */
  try {
/*@egen*/  numVar() opNumVar()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}//Aceita Operador_aritimetico + numero ou Variavel e/ou recur\u00e7\u00e3o
void opNumVar() :{/*@bgen(jjtree) opNumVar */
  SimpleNode jjtn000 = new SimpleNode(JJTOPNUMVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) opNumVar */
  try {
/*@egen*/  op_arit() numVar() [ opNumVar() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void atOpNumVar() :{/*@bgen(jjtree) atOpNumVar */
  SimpleNode jjtn000 = new SimpleNode(JJTATOPNUMVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) atOpNumVar */
  try {
/*@egen*/  LOOKAHEAD(2)  operacao()| numVar()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void relacao() :{/*@bgen(jjtree) relacao */
  SimpleNode jjtn000 = new SimpleNode(JJTRELACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) relacao */
  try {
/*@egen*/  atOpNumVar() op_rel() atOpNumVar()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void atribuicao() :{/*@bgen(jjtree) atribuicao */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) atribuicao */
  try {
/*@egen*/  variavel() < ATRIBUICAO > atOpNumVar() < PONTO_VIRGULA >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void declaracao() :{/*@bgen(jjtree) declaracao */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) declaracao */
  try {
/*@egen*/  const_tipo() variavel() < PONTO_VIRGULA >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void conteudoCond() :{/*@bgen(jjtree) conteudoCond */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTEUDOCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) conteudoCond */
  try {
/*@egen*/  LOOKAHEAD(2)  relacao()| atOpNumVar()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void conteudoBloco() :{/*@bgen(jjtree) conteudoBloco */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTEUDOBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) conteudoBloco */
  try {
/*@egen*/  LOOKAHEAD(2)  operacao()| LOOKAHEAD(2)  atribuicao()| declaracao()| condicional()| repeticao()| numVar() < PONTO_VIRGULA >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void bloco() :{/*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) bloco */
  try {
/*@egen*/  < ABRE_CHAVES >  (    conteudoBloco()  )*  < FECHA_CHAVES >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void condicional() :{/*@bgen(jjtree) condicional */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) condicional */
  try {
/*@egen*/  < SE > < ABRE_PARENTESES > conteudoCond() < FECHA_PARENTESES > bloco() [ < SENAO > bloco() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void repeticao() :{/*@bgen(jjtree) repeticao */
  SimpleNode jjtn000 = new SimpleNode(JJTREPETICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) repeticao */
  try {
/*@egen*/  < ENQUANTO > < ABRE_PARENTESES > conteudoCond() < FECHA_PARENTESES > bloco()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
