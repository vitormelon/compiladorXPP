options{  JDK_VERSION = "1.5";  STATIC = true;  //DEBUG_LOOKAHEAD = true;
  //FORCE_LA_CHECK = true;}PARSER_BEGIN(EG1)package javacc;public class EG1{  public static java.io.InputStream nome;  public static java.io.FileReader arquivo;  public static void main(String args []) throws ParseException  {    try    {      java.io.File file = new java.io.File("c:/compilador/test.txt");      arquivo = new java.io.FileReader(file);      nome = new java.io.FileInputStream(file);    }    catch (Exception e)    {      System.out.println("Arquivo Nao Encontrado");    }    EG1 parser = new EG1(nome);    while (true)    {      switch (parser.programa())      {        case 0 : System.out.println("OK.");        break;        case 1 : System.out.println("Analise Lexia e Sintatica concluida sem erros");     			return;       // break;        default : break;      }    }  }}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"| "\f"}TOKEN : /*PALAVRAS RESERVADASS*/{  < INT : "INT" >| < REAL : "REAL" >| < BOOL : "BOOL" >| < LIST : "LIST" >| < STR : "STR" >| < CARACT : "CARACT" >| < SE : "SE" >| < SENAO : "SENAO" >| < SENAOSE : "SENAOSE" >| < ENQUANTO : "ENQUANTO" >| < PARA : "PARA" >| < VERDADEIRO : "VERDADEIRO" >| < FALSO : "FALSO" >| < IMPRIMIR : "IMPRIMIR" >}TOKEN : /* OPERADORES */{  < MAIS : "+" >| < MENOS : "-" >| < MULTIPLICAR : "*" >| < DIVIDIR : "/" >| < ATRIBUICAO : "=" >| < MAIOR : ">" >| < MENOR : "<" >| < MAIOR_IGUAL : " >=" >| < MENOR_IGUAL : "<=" >| < IGUAL : "==" >| < DIFERENTE : "!=" >}TOKEN : /* SIMBOLOS ESPECIAIS*/{  < ABRE_PARENTESES : "(" >| < FECHA_PARENTESES : ")" >| < ABRE_CHAVES : "{" >| < FECHA_CHAVES : "}" >| < ABRE_COLCHETE : "[" >| < FECHA_COLCHETE : "]" >| < PONTO_VIRGULA : ";" >| < VIRGULA : "," >| < PONTO : "." >}TOKEN : /* CONSTANTES */{  < CONSTANTE_INT : (< DIGITO >)+ >| < CONSTANTE_REAL : (< DIGITO >)+ "," (< DIGITO >)* >| < DIGITO : [ "0"-"9" ] >| <VARIAVEL: <CARACTERE> (<CARACTERE>)*>| < #CARACTERE : [ "a"-"z" ] >}int programa() :{}{  conteudoBloco()  {    return 0;  }| fimDoArquivo(){  return 1;}}int fimDoArquivo():{}{  < EOF >  {return 1;}}void op_rel() :{}{  < MAIOR >| < MENOR >| < MAIOR_IGUAL >| < MENOR_IGUAL >| < IGUAL >| < DIFERENTE >}void const_tipo() :{}{  < INT >| < REAL >| < BOOL >| < LIST >| < STR >| < CARACT >}void op_arit() :{}{  < MAIS >| < MENOS >| < MULTIPLICAR >| < DIVIDIR >}void variavel() :{}{  < VARIAVEL >}void numero() :{}{  < CONSTANTE_INT >| < CONSTANTE_REAL >}void numVar() :{}{  numero()| variavel()}void operacao() :{}{  numVar() opNumVar()}//Aceita Operador_aritimetico + numero ou Variavel e/ou recurção
void opNumVar() :{}{  op_arit() numVar() [ opNumVar() ]}void atOpNumVar() :{}{  LOOKAHEAD(2)  operacao()| numVar()}void relacao() :{}{  atOpNumVar() op_rel() atOpNumVar()}void atribuicao() :{}{  variavel() < ATRIBUICAO > atOpNumVar() < PONTO_VIRGULA >}void declaracao() :{}{  const_tipo() variavel() < PONTO_VIRGULA >}void conteudoCond() :{}{  LOOKAHEAD(2)  relacao()| atOpNumVar()}void conteudoBloco() :{}{  LOOKAHEAD(2)  operacao()| LOOKAHEAD(2)  atribuicao()| declaracao()| condicional()| repeticao()| numVar() < PONTO_VIRGULA >}void bloco() :{}{  < ABRE_CHAVES >  (    conteudoBloco()  )*  < FECHA_CHAVES >}void condicional() :{}{  < SE > < ABRE_PARENTESES > conteudoCond() < FECHA_PARENTESES > bloco() [ < SENAO > bloco() ]}void repeticao() :{}{  < ENQUANTO > < ABRE_PARENTESES > conteudoCond() < FECHA_PARENTESES > bloco()}
